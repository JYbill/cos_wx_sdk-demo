"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var COS = require('cos-wx-sdk-v5');
var util_1 = require("../utils/util");
var MyCOS = (function () {
    function MyCOS() {
        this.AVATAR_PREFIEX = 'avatar/';
        this.BASE_COS_JAVA_KEY_SERVER = 'http://127.0.0.1:8080/qc/key';
        this.BUCKET = 'myblogspringboot-1300326898';
        this.REGION = 'ap-nanjing';
    }
    MyCOS.prototype.getBucket = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.cos.getBucket({
                Bucket: _this.BUCKET,
                Region: _this.REGION,
                Prefix: 'avatar/',
            }, function (err, data) {
                err ? resolve(err) : '';
                resolve(data.Contents);
            });
        });
    };
    MyCOS.prototype.simpleUpload = function (f, progress) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.cos.postObject({
                Bucket: _this.BUCKET,
                Region: _this.REGION,
                Key: _this.AVATAR_PREFIEX + util_1.Utils.randomFileName(f.name),
                FilePath: f.path,
                onProgress: function (progressData) {
                    progress(progressData);
                }
            }, function (err, data) {
                resolve(err || data);
            });
        });
    };
    MyCOS.prototype.uploadFile = function (key, path, taskReady, progress, fileFinish) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.cos.uploadFile({
                Bucket: _this.BUCKET,
                Region: _this.REGION,
                Key: key,
                FilePath: path,
                SliceSize: 1024 * 1024 * 20,
                onTaskReady: function (taskId) {
                    taskReady ? taskReady(taskId) : '';
                },
                onProgress: function (_a) {
                    var loaded = _a.loaded, total = _a.total, speed = _a.speed;
                    progress ? progress(loaded, total, speed) : '';
                },
                onFileFinish: function (err, data, options) {
                    fileFinish ? fileFinish(err, data, options) : '';
                },
            }, function (err, data) {
                err ? resolve(err) : resolve(data);
            });
        });
    };
    MyCOS.prototype.uploadMoreFile = function (files, taskReady, progress, fileFinish) {
        var _this = this;
        var uploadFiles = files.
            map(function (item) {
            return Object.assign(item, {
                FilePath: item.path,
                FileSize: item.size,
                Bucket: _this.BUCKET,
                Region: _this.REGION,
                Key: _this.AVATAR_PREFIEX + util_1.Utils.randomFileName(item.name),
                onTaskReady: function (taskId) {
                    taskReady ? taskReady(taskId) : '';
                }
            });
        });
        return new Promise(function (resolve) {
            _this.cos.uploadFiles({
                files: uploadFiles,
                SliceSize: 1024 * 1024 * 10,
                onProgress: function (info) {
                    console.log(info);
                    progress ? progress(info.total, info.speed, info.percent) : '';
                },
                onFileFinish: function (err, data, options) {
                    fileFinish ? fileFinish(err || data, options) : '';
                },
            }, function (err, data) {
                resolve(err || data);
            });
        });
    };
    MyCOS.prototype.allTasks = function () {
        return this.cos.getTaskList();
    };
    MyCOS.prototype.clearTask = function (taskId) {
        return this.cos.cancelTask(taskId);
    };
    MyCOS.prototype.pauseTask = function (taskId) {
        this.cos.pauseTask(taskId);
    };
    MyCOS.prototype.reStartTask = function (taskId) {
        this.cos.restartTask(taskId);
    };
    return MyCOS;
}());
var myCos = new MyCOS();
myCos.cos = new COS({
    getAuthorization: function (options, callback) {
        wx.request({
            url: myCos.BASE_COS_JAVA_KEY_SERVER,
            data: {},
            dataType: 'json',
            success: function (result) {
                var data = result.data.data;
                var credentials = data && data.credentials;
                if (!data || !credentials)
                    return console.error('凭证无效...');
                callback({
                    TmpSecretId: credentials.tmpSecretId,
                    TmpSecretKey: credentials.tmpSecretKey,
                    XCosSecurityToken: credentials.sessionToken,
                    StartTime: data.startTime,
                    ExpiredTime: data.expiredTime,
                });
            }
        });
    }
});
exports.default = myCos;
//# sourceMappingURL=data:application/json;base64,